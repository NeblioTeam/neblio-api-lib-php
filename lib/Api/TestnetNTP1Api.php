<?php
/**
 * TestnetNTP1Api
 * PHP version 5
 *
 * @category Class
 * @package  NeblioAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NeblioAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use NeblioAPI\ApiException;
use NeblioAPI\Configuration;
use NeblioAPI\HeaderSelector;
use NeblioAPI\ObjectSerializer;

/**
 * TestnetNTP1Api Class Doc Comment
 *
 * @category Class
 * @package  NeblioAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TestnetNTP1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation testnetBroadcastTx
     *
     * Broadcasts a signed raw transaction to the network
     *
     * @param  \NeblioAPI\Model\BroadcastTxRequest $broadcast_tx_request Object representing a transaction to broadcast (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\BroadcastTxResponse|\NeblioAPI\Model\Error
     */
    public function testnetBroadcastTx($broadcast_tx_request)
    {
        list($response) = $this->testnetBroadcastTxWithHttpInfo($broadcast_tx_request);
        return $response;
    }

    /**
     * Operation testnetBroadcastTxWithHttpInfo
     *
     * Broadcasts a signed raw transaction to the network
     *
     * @param  \NeblioAPI\Model\BroadcastTxRequest $broadcast_tx_request Object representing a transaction to broadcast (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\BroadcastTxResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetBroadcastTxWithHttpInfo($broadcast_tx_request)
    {
        $request = $this->testnetBroadcastTxRequest($broadcast_tx_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\BroadcastTxResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\BroadcastTxResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\BroadcastTxResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\BroadcastTxResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetBroadcastTxAsync
     *
     * Broadcasts a signed raw transaction to the network
     *
     * @param  \NeblioAPI\Model\BroadcastTxRequest $broadcast_tx_request Object representing a transaction to broadcast (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetBroadcastTxAsync($broadcast_tx_request)
    {
        return $this->testnetBroadcastTxAsyncWithHttpInfo($broadcast_tx_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetBroadcastTxAsyncWithHttpInfo
     *
     * Broadcasts a signed raw transaction to the network
     *
     * @param  \NeblioAPI\Model\BroadcastTxRequest $broadcast_tx_request Object representing a transaction to broadcast (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetBroadcastTxAsyncWithHttpInfo($broadcast_tx_request)
    {
        $returnType = '\NeblioAPI\Model\BroadcastTxResponse';
        $request = $this->testnetBroadcastTxRequest($broadcast_tx_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetBroadcastTx'
     *
     * @param  \NeblioAPI\Model\BroadcastTxRequest $broadcast_tx_request Object representing a transaction to broadcast (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetBroadcastTxRequest($broadcast_tx_request)
    {
        // verify the required parameter 'broadcast_tx_request' is set
        if ($broadcast_tx_request === null || (is_array($broadcast_tx_request) && count($broadcast_tx_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $broadcast_tx_request when calling testnetBroadcastTx'
            );
        }

        $resourcePath = '/testnet/ntp1/broadcast';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($broadcast_tx_request)) {
            $_tempBody = $broadcast_tx_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetBurnToken
     *
     * Builds a transaction that burns an NTP1 Token
     *
     * @param  \NeblioAPI\Model\BurnTokenRequest $burn_token_request Object representing the token to be burned (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\BurnTokenResponse|\NeblioAPI\Model\Error
     */
    public function testnetBurnToken($burn_token_request)
    {
        list($response) = $this->testnetBurnTokenWithHttpInfo($burn_token_request);
        return $response;
    }

    /**
     * Operation testnetBurnTokenWithHttpInfo
     *
     * Builds a transaction that burns an NTP1 Token
     *
     * @param  \NeblioAPI\Model\BurnTokenRequest $burn_token_request Object representing the token to be burned (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\BurnTokenResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetBurnTokenWithHttpInfo($burn_token_request)
    {
        $request = $this->testnetBurnTokenRequest($burn_token_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\BurnTokenResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\BurnTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\BurnTokenResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\BurnTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetBurnTokenAsync
     *
     * Builds a transaction that burns an NTP1 Token
     *
     * @param  \NeblioAPI\Model\BurnTokenRequest $burn_token_request Object representing the token to be burned (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetBurnTokenAsync($burn_token_request)
    {
        return $this->testnetBurnTokenAsyncWithHttpInfo($burn_token_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetBurnTokenAsyncWithHttpInfo
     *
     * Builds a transaction that burns an NTP1 Token
     *
     * @param  \NeblioAPI\Model\BurnTokenRequest $burn_token_request Object representing the token to be burned (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetBurnTokenAsyncWithHttpInfo($burn_token_request)
    {
        $returnType = '\NeblioAPI\Model\BurnTokenResponse';
        $request = $this->testnetBurnTokenRequest($burn_token_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetBurnToken'
     *
     * @param  \NeblioAPI\Model\BurnTokenRequest $burn_token_request Object representing the token to be burned (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetBurnTokenRequest($burn_token_request)
    {
        // verify the required parameter 'burn_token_request' is set
        if ($burn_token_request === null || (is_array($burn_token_request) && count($burn_token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $burn_token_request when calling testnetBurnToken'
            );
        }

        $resourcePath = '/testnet/ntp1/burntoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($burn_token_request)) {
            $_tempBody = $burn_token_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetGetAddressInfo
     *
     * Information On a Neblio Address
     *
     * @param  string $address Neblio Address to get information on. (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\GetAddressInfoResponse|\NeblioAPI\Model\Error
     */
    public function testnetGetAddressInfo($address)
    {
        list($response) = $this->testnetGetAddressInfoWithHttpInfo($address);
        return $response;
    }

    /**
     * Operation testnetGetAddressInfoWithHttpInfo
     *
     * Information On a Neblio Address
     *
     * @param  string $address Neblio Address to get information on. (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\GetAddressInfoResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetGetAddressInfoWithHttpInfo($address)
    {
        $request = $this->testnetGetAddressInfoRequest($address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\GetAddressInfoResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\GetAddressInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\GetAddressInfoResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\GetAddressInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetGetAddressInfoAsync
     *
     * Information On a Neblio Address
     *
     * @param  string $address Neblio Address to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetAddressInfoAsync($address)
    {
        return $this->testnetGetAddressInfoAsyncWithHttpInfo($address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetGetAddressInfoAsyncWithHttpInfo
     *
     * Information On a Neblio Address
     *
     * @param  string $address Neblio Address to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetAddressInfoAsyncWithHttpInfo($address)
    {
        $returnType = '\NeblioAPI\Model\GetAddressInfoResponse';
        $request = $this->testnetGetAddressInfoRequest($address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetGetAddressInfo'
     *
     * @param  string $address Neblio Address to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetGetAddressInfoRequest($address)
    {
        // verify the required parameter 'address' is set
        if ($address === null || (is_array($address) && count($address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling testnetGetAddressInfo'
            );
        }

        $resourcePath = '/testnet/ntp1/addressinfo/{address}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($address !== null) {
            $resourcePath = str_replace(
                '{' . 'address' . '}',
                ObjectSerializer::toPathValue($address),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetGetTokenHolders
     *
     * Get Addresses Holding a Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\GetTokenHoldersResponse|\NeblioAPI\Model\Error
     */
    public function testnetGetTokenHolders($tokenid)
    {
        list($response) = $this->testnetGetTokenHoldersWithHttpInfo($tokenid);
        return $response;
    }

    /**
     * Operation testnetGetTokenHoldersWithHttpInfo
     *
     * Get Addresses Holding a Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\GetTokenHoldersResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetGetTokenHoldersWithHttpInfo($tokenid)
    {
        $request = $this->testnetGetTokenHoldersRequest($tokenid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\GetTokenHoldersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\GetTokenHoldersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\GetTokenHoldersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\GetTokenHoldersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetGetTokenHoldersAsync
     *
     * Get Addresses Holding a Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenHoldersAsync($tokenid)
    {
        return $this->testnetGetTokenHoldersAsyncWithHttpInfo($tokenid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetGetTokenHoldersAsyncWithHttpInfo
     *
     * Get Addresses Holding a Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenHoldersAsyncWithHttpInfo($tokenid)
    {
        $returnType = '\NeblioAPI\Model\GetTokenHoldersResponse';
        $request = $this->testnetGetTokenHoldersRequest($tokenid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetGetTokenHolders'
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetGetTokenHoldersRequest($tokenid)
    {
        // verify the required parameter 'tokenid' is set
        if ($tokenid === null || (is_array($tokenid) && count($tokenid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenid when calling testnetGetTokenHolders'
            );
        }

        $resourcePath = '/testnet/ntp1/stakeholders/{tokenid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tokenid !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenid' . '}',
                ObjectSerializer::toPathValue($tokenid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetGetTokenId
     *
     * Returns the tokenId representing a token
     *
     * @param  string $tokensymbol Token symbol (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\GetTokenIdResponse
     */
    public function testnetGetTokenId($tokensymbol)
    {
        list($response) = $this->testnetGetTokenIdWithHttpInfo($tokensymbol);
        return $response;
    }

    /**
     * Operation testnetGetTokenIdWithHttpInfo
     *
     * Returns the tokenId representing a token
     *
     * @param  string $tokensymbol Token symbol (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\GetTokenIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetGetTokenIdWithHttpInfo($tokensymbol)
    {
        $request = $this->testnetGetTokenIdRequest($tokensymbol);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\GetTokenIdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\GetTokenIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\GetTokenIdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\GetTokenIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetGetTokenIdAsync
     *
     * Returns the tokenId representing a token
     *
     * @param  string $tokensymbol Token symbol (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenIdAsync($tokensymbol)
    {
        return $this->testnetGetTokenIdAsyncWithHttpInfo($tokensymbol)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetGetTokenIdAsyncWithHttpInfo
     *
     * Returns the tokenId representing a token
     *
     * @param  string $tokensymbol Token symbol (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenIdAsyncWithHttpInfo($tokensymbol)
    {
        $returnType = '\NeblioAPI\Model\GetTokenIdResponse';
        $request = $this->testnetGetTokenIdRequest($tokensymbol);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetGetTokenId'
     *
     * @param  string $tokensymbol Token symbol (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetGetTokenIdRequest($tokensymbol)
    {
        // verify the required parameter 'tokensymbol' is set
        if ($tokensymbol === null || (is_array($tokensymbol) && count($tokensymbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokensymbol when calling testnetGetTokenId'
            );
        }

        $resourcePath = '/testnet/ntp1/tokenid/{tokensymbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tokensymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'tokensymbol' . '}',
                ObjectSerializer::toPathValue($tokensymbol),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetGetTokenMetadataOfIssuance
     *
     * Get Issuance Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\GetTokenMetadataResponse|\NeblioAPI\Model\Error
     */
    public function testnetGetTokenMetadataOfIssuance($tokenid)
    {
        list($response) = $this->testnetGetTokenMetadataOfIssuanceWithHttpInfo($tokenid);
        return $response;
    }

    /**
     * Operation testnetGetTokenMetadataOfIssuanceWithHttpInfo
     *
     * Get Issuance Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\GetTokenMetadataResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetGetTokenMetadataOfIssuanceWithHttpInfo($tokenid)
    {
        $request = $this->testnetGetTokenMetadataOfIssuanceRequest($tokenid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\GetTokenMetadataResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\GetTokenMetadataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\GetTokenMetadataResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\GetTokenMetadataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetGetTokenMetadataOfIssuanceAsync
     *
     * Get Issuance Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenMetadataOfIssuanceAsync($tokenid)
    {
        return $this->testnetGetTokenMetadataOfIssuanceAsyncWithHttpInfo($tokenid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetGetTokenMetadataOfIssuanceAsyncWithHttpInfo
     *
     * Get Issuance Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenMetadataOfIssuanceAsyncWithHttpInfo($tokenid)
    {
        $returnType = '\NeblioAPI\Model\GetTokenMetadataResponse';
        $request = $this->testnetGetTokenMetadataOfIssuanceRequest($tokenid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetGetTokenMetadataOfIssuance'
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetGetTokenMetadataOfIssuanceRequest($tokenid)
    {
        // verify the required parameter 'tokenid' is set
        if ($tokenid === null || (is_array($tokenid) && count($tokenid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenid when calling testnetGetTokenMetadataOfIssuance'
            );
        }

        $resourcePath = '/testnet/ntp1/tokenmetadata/{tokenid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tokenid !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenid' . '}',
                ObjectSerializer::toPathValue($tokenid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetGetTokenMetadataOfUtxo
     *
     * Get UTXO Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     * @param  string $utxo Specific UTXO to request metadata for (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\GetTokenMetadataResponse|\NeblioAPI\Model\Error
     */
    public function testnetGetTokenMetadataOfUtxo($tokenid, $utxo)
    {
        list($response) = $this->testnetGetTokenMetadataOfUtxoWithHttpInfo($tokenid, $utxo);
        return $response;
    }

    /**
     * Operation testnetGetTokenMetadataOfUtxoWithHttpInfo
     *
     * Get UTXO Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     * @param  string $utxo Specific UTXO to request metadata for (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\GetTokenMetadataResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetGetTokenMetadataOfUtxoWithHttpInfo($tokenid, $utxo)
    {
        $request = $this->testnetGetTokenMetadataOfUtxoRequest($tokenid, $utxo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\GetTokenMetadataResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\GetTokenMetadataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\GetTokenMetadataResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\GetTokenMetadataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetGetTokenMetadataOfUtxoAsync
     *
     * Get UTXO Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     * @param  string $utxo Specific UTXO to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenMetadataOfUtxoAsync($tokenid, $utxo)
    {
        return $this->testnetGetTokenMetadataOfUtxoAsyncWithHttpInfo($tokenid, $utxo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetGetTokenMetadataOfUtxoAsyncWithHttpInfo
     *
     * Get UTXO Metadata of Token
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     * @param  string $utxo Specific UTXO to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTokenMetadataOfUtxoAsyncWithHttpInfo($tokenid, $utxo)
    {
        $returnType = '\NeblioAPI\Model\GetTokenMetadataResponse';
        $request = $this->testnetGetTokenMetadataOfUtxoRequest($tokenid, $utxo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetGetTokenMetadataOfUtxo'
     *
     * @param  string $tokenid TokenId to request metadata for (required)
     * @param  string $utxo Specific UTXO to request metadata for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetGetTokenMetadataOfUtxoRequest($tokenid, $utxo)
    {
        // verify the required parameter 'tokenid' is set
        if ($tokenid === null || (is_array($tokenid) && count($tokenid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenid when calling testnetGetTokenMetadataOfUtxo'
            );
        }
        // verify the required parameter 'utxo' is set
        if ($utxo === null || (is_array($utxo) && count($utxo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $utxo when calling testnetGetTokenMetadataOfUtxo'
            );
        }

        $resourcePath = '/testnet/ntp1/tokenmetadata/{tokenid}/{utxo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tokenid !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenid' . '}',
                ObjectSerializer::toPathValue($tokenid),
                $resourcePath
            );
        }
        // path params
        if ($utxo !== null) {
            $resourcePath = str_replace(
                '{' . 'utxo' . '}',
                ObjectSerializer::toPathValue($utxo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetGetTransactionInfo
     *
     * Information On an NTP1 Transaction
     *
     * @param  string $txid Neblio txid to get information on. (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\GetTransactionInfoResponse|\NeblioAPI\Model\Error
     */
    public function testnetGetTransactionInfo($txid)
    {
        list($response) = $this->testnetGetTransactionInfoWithHttpInfo($txid);
        return $response;
    }

    /**
     * Operation testnetGetTransactionInfoWithHttpInfo
     *
     * Information On an NTP1 Transaction
     *
     * @param  string $txid Neblio txid to get information on. (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\GetTransactionInfoResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetGetTransactionInfoWithHttpInfo($txid)
    {
        $request = $this->testnetGetTransactionInfoRequest($txid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\GetTransactionInfoResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\GetTransactionInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\GetTransactionInfoResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\GetTransactionInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetGetTransactionInfoAsync
     *
     * Information On an NTP1 Transaction
     *
     * @param  string $txid Neblio txid to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTransactionInfoAsync($txid)
    {
        return $this->testnetGetTransactionInfoAsyncWithHttpInfo($txid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetGetTransactionInfoAsyncWithHttpInfo
     *
     * Information On an NTP1 Transaction
     *
     * @param  string $txid Neblio txid to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetGetTransactionInfoAsyncWithHttpInfo($txid)
    {
        $returnType = '\NeblioAPI\Model\GetTransactionInfoResponse';
        $request = $this->testnetGetTransactionInfoRequest($txid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetGetTransactionInfo'
     *
     * @param  string $txid Neblio txid to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetGetTransactionInfoRequest($txid)
    {
        // verify the required parameter 'txid' is set
        if ($txid === null || (is_array($txid) && count($txid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txid when calling testnetGetTransactionInfo'
            );
        }

        $resourcePath = '/testnet/ntp1/transactioninfo/{txid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($txid !== null) {
            $resourcePath = str_replace(
                '{' . 'txid' . '}',
                ObjectSerializer::toPathValue($txid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetIssueToken
     *
     * Builds a transaction that issues a new NTP1 Token
     *
     * @param  \NeblioAPI\Model\IssueTokenRequest $issue_token_request Object representing the token to be created (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\IssueTokenResponse|\NeblioAPI\Model\Error
     */
    public function testnetIssueToken($issue_token_request)
    {
        list($response) = $this->testnetIssueTokenWithHttpInfo($issue_token_request);
        return $response;
    }

    /**
     * Operation testnetIssueTokenWithHttpInfo
     *
     * Builds a transaction that issues a new NTP1 Token
     *
     * @param  \NeblioAPI\Model\IssueTokenRequest $issue_token_request Object representing the token to be created (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\IssueTokenResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetIssueTokenWithHttpInfo($issue_token_request)
    {
        $request = $this->testnetIssueTokenRequest($issue_token_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\IssueTokenResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\IssueTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\IssueTokenResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\IssueTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetIssueTokenAsync
     *
     * Builds a transaction that issues a new NTP1 Token
     *
     * @param  \NeblioAPI\Model\IssueTokenRequest $issue_token_request Object representing the token to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetIssueTokenAsync($issue_token_request)
    {
        return $this->testnetIssueTokenAsyncWithHttpInfo($issue_token_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetIssueTokenAsyncWithHttpInfo
     *
     * Builds a transaction that issues a new NTP1 Token
     *
     * @param  \NeblioAPI\Model\IssueTokenRequest $issue_token_request Object representing the token to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetIssueTokenAsyncWithHttpInfo($issue_token_request)
    {
        $returnType = '\NeblioAPI\Model\IssueTokenResponse';
        $request = $this->testnetIssueTokenRequest($issue_token_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetIssueToken'
     *
     * @param  \NeblioAPI\Model\IssueTokenRequest $issue_token_request Object representing the token to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetIssueTokenRequest($issue_token_request)
    {
        // verify the required parameter 'issue_token_request' is set
        if ($issue_token_request === null || (is_array($issue_token_request) && count($issue_token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $issue_token_request when calling testnetIssueToken'
            );
        }

        $resourcePath = '/testnet/ntp1/issue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($issue_token_request)) {
            $_tempBody = $issue_token_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testnetSendToken
     *
     * Builds a transaction that sends an NTP1 Token
     *
     * @param  \NeblioAPI\Model\SendTokenRequest $send_token_request Object representing the token to be sent (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \NeblioAPI\Model\SendTokenResponse|\NeblioAPI\Model\Error
     */
    public function testnetSendToken($send_token_request)
    {
        list($response) = $this->testnetSendTokenWithHttpInfo($send_token_request);
        return $response;
    }

    /**
     * Operation testnetSendTokenWithHttpInfo
     *
     * Builds a transaction that sends an NTP1 Token
     *
     * @param  \NeblioAPI\Model\SendTokenRequest $send_token_request Object representing the token to be sent (required)
     *
     * @throws \NeblioAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \NeblioAPI\Model\SendTokenResponse|\NeblioAPI\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testnetSendTokenWithHttpInfo($send_token_request)
    {
        $request = $this->testnetSendTokenRequest($send_token_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\NeblioAPI\Model\SendTokenResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\SendTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\NeblioAPI\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\NeblioAPI\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\NeblioAPI\Model\SendTokenResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\SendTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NeblioAPI\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testnetSendTokenAsync
     *
     * Builds a transaction that sends an NTP1 Token
     *
     * @param  \NeblioAPI\Model\SendTokenRequest $send_token_request Object representing the token to be sent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetSendTokenAsync($send_token_request)
    {
        return $this->testnetSendTokenAsyncWithHttpInfo($send_token_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testnetSendTokenAsyncWithHttpInfo
     *
     * Builds a transaction that sends an NTP1 Token
     *
     * @param  \NeblioAPI\Model\SendTokenRequest $send_token_request Object representing the token to be sent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testnetSendTokenAsyncWithHttpInfo($send_token_request)
    {
        $returnType = '\NeblioAPI\Model\SendTokenResponse';
        $request = $this->testnetSendTokenRequest($send_token_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testnetSendToken'
     *
     * @param  \NeblioAPI\Model\SendTokenRequest $send_token_request Object representing the token to be sent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testnetSendTokenRequest($send_token_request)
    {
        // verify the required parameter 'send_token_request' is set
        if ($send_token_request === null || (is_array($send_token_request) && count($send_token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_token_request when calling testnetSendToken'
            );
        }

        $resourcePath = '/testnet/ntp1/sendtoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($send_token_request)) {
            $_tempBody = $send_token_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
