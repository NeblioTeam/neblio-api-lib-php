<?php
/**
 * GetTokenHoldersResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  NeblioAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NeblioAPI\Model;

use \ArrayAccess;
use \NeblioAPI\ObjectSerializer;

/**
 * GetTokenHoldersResponse Class Doc Comment
 *
 * @category Class
 * @package  NeblioAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GetTokenHoldersResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getTokenHoldersResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token_id' => 'string',
        'holders' => '\NeblioAPI\Model\GetTokenHoldersResponseHolders[]',
        'divibility' => 'float',
        'lock_status' => 'bool',
        'aggregation_policy' => 'string',
        'some_utxo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'token_id' => null,
        'holders' => null,
        'divibility' => null,
        'lock_status' => null,
        'aggregation_policy' => null,
        'some_utxo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_id' => 'tokenId',
        'holders' => 'holders',
        'divibility' => 'divibility',
        'lock_status' => 'lockStatus',
        'aggregation_policy' => 'aggregationPolicy',
        'some_utxo' => 'someUtxo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_id' => 'setTokenId',
        'holders' => 'setHolders',
        'divibility' => 'setDivibility',
        'lock_status' => 'setLockStatus',
        'aggregation_policy' => 'setAggregationPolicy',
        'some_utxo' => 'setSomeUtxo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_id' => 'getTokenId',
        'holders' => 'getHolders',
        'divibility' => 'getDivibility',
        'lock_status' => 'getLockStatus',
        'aggregation_policy' => 'getAggregationPolicy',
        'some_utxo' => 'getSomeUtxo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token_id'] = isset($data['token_id']) ? $data['token_id'] : null;
        $this->container['holders'] = isset($data['holders']) ? $data['holders'] : null;
        $this->container['divibility'] = isset($data['divibility']) ? $data['divibility'] : null;
        $this->container['lock_status'] = isset($data['lock_status']) ? $data['lock_status'] : null;
        $this->container['aggregation_policy'] = isset($data['aggregation_policy']) ? $data['aggregation_policy'] : null;
        $this->container['some_utxo'] = isset($data['some_utxo']) ? $data['some_utxo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_id
     *
     * @return string|null
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string|null $token_id TokenId of the token
     *
     * @return $this
     */
    public function setTokenId($token_id)
    {
        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets holders
     *
     * @return \NeblioAPI\Model\GetTokenHoldersResponseHolders[]|null
     */
    public function getHolders()
    {
        return $this->container['holders'];
    }

    /**
     * Sets holders
     *
     * @param \NeblioAPI\Model\GetTokenHoldersResponseHolders[]|null $holders holders
     *
     * @return $this
     */
    public function setHolders($holders)
    {
        $this->container['holders'] = $holders;

        return $this;
    }

    /**
     * Gets divibility
     *
     * @return float|null
     */
    public function getDivibility()
    {
        return $this->container['divibility'];
    }

    /**
     * Sets divibility
     *
     * @param float|null $divibility How many decimal points the token is divisble to
     *
     * @return $this
     */
    public function setDivibility($divibility)
    {
        $this->container['divibility'] = $divibility;

        return $this;
    }

    /**
     * Gets lock_status
     *
     * @return bool|null
     */
    public function getLockStatus()
    {
        return $this->container['lock_status'];
    }

    /**
     * Sets lock_status
     *
     * @param bool|null $lock_status Whether new issuances of this token are locked
     *
     * @return $this
     */
    public function setLockStatus($lock_status)
    {
        $this->container['lock_status'] = $lock_status;

        return $this;
    }

    /**
     * Gets aggregation_policy
     *
     * @return string|null
     */
    public function getAggregationPolicy()
    {
        return $this->container['aggregation_policy'];
    }

    /**
     * Sets aggregation_policy
     *
     * @param string|null $aggregation_policy Whether the tokesn are aggregatable
     *
     * @return $this
     */
    public function setAggregationPolicy($aggregation_policy)
    {
        $this->container['aggregation_policy'] = $aggregation_policy;

        return $this;
    }

    /**
     * Gets some_utxo
     *
     * @return string|null
     */
    public function getSomeUtxo()
    {
        return $this->container['some_utxo'];
    }

    /**
     * Sets some_utxo
     *
     * @param string|null $some_utxo A UTXO of this token
     *
     * @return $this
     */
    public function setSomeUtxo($some_utxo)
    {
        $this->container['some_utxo'] = $some_utxo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


