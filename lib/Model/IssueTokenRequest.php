<?php
/**
 * IssueTokenRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  NeblioAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Neblio REST API Suite
 *
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NeblioAPI\Model;

use \ArrayAccess;
use \NeblioAPI\ObjectSerializer;

/**
 * IssueTokenRequest Class Doc Comment
 *
 * @category Class
 * @package  NeblioAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IssueTokenRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'issueTokenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'issue_address' => 'string',
        'amount' => 'float',
        'divisibility' => 'float',
        'fee' => 'float',
        'reissuable' => 'bool',
        'flags' => '\NeblioAPI\Model\IssueTokenRequestFlags',
        'transfer' => '\NeblioAPI\Model\IssueTokenRequestTransfer[]',
        'metadata' => '\NeblioAPI\Model\IssueTokenRequestMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'issue_address' => null,
        'amount' => null,
        'divisibility' => null,
        'fee' => null,
        'reissuable' => null,
        'flags' => null,
        'transfer' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'issue_address' => 'issueAddress',
        'amount' => 'amount',
        'divisibility' => 'divisibility',
        'fee' => 'fee',
        'reissuable' => 'reissuable',
        'flags' => 'flags',
        'transfer' => 'transfer',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'issue_address' => 'setIssueAddress',
        'amount' => 'setAmount',
        'divisibility' => 'setDivisibility',
        'fee' => 'setFee',
        'reissuable' => 'setReissuable',
        'flags' => 'setFlags',
        'transfer' => 'setTransfer',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'issue_address' => 'getIssueAddress',
        'amount' => 'getAmount',
        'divisibility' => 'getDivisibility',
        'fee' => 'getFee',
        'reissuable' => 'getReissuable',
        'flags' => 'getFlags',
        'transfer' => 'getTransfer',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['issue_address'] = isset($data['issue_address']) ? $data['issue_address'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['divisibility'] = isset($data['divisibility']) ? $data['divisibility'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['reissuable'] = isset($data['reissuable']) ? $data['reissuable'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['transfer'] = isset($data['transfer']) ? $data['transfer'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['issue_address'] === null) {
            $invalidProperties[] = "'issue_address' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['divisibility'] === null) {
            $invalidProperties[] = "'divisibility' can't be null";
        }
        if ($this->container['fee'] === null) {
            $invalidProperties[] = "'fee' can't be null";
        }
        if ($this->container['reissuable'] === null) {
            $invalidProperties[] = "'reissuable' can't be null";
        }
        if ($this->container['transfer'] === null) {
            $invalidProperties[] = "'transfer' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets issue_address
     *
     * @return string
     */
    public function getIssueAddress()
    {
        return $this->container['issue_address'];
    }

    /**
     * Sets issue_address
     *
     * @param string $issue_address Address issuing the token
     *
     * @return $this
     */
    public function setIssueAddress($issue_address)
    {
        $this->container['issue_address'] = $issue_address;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Number of tokens to issue
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets divisibility
     *
     * @return float
     */
    public function getDivisibility()
    {
        return $this->container['divisibility'];
    }

    /**
     * Sets divisibility
     *
     * @param float $divisibility Number of decimal places the token should be divisble by (0-7)
     *
     * @return $this
     */
    public function setDivisibility($divisibility)
    {
        $this->container['divisibility'] = $divisibility;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets reissuable
     *
     * @return bool
     */
    public function getReissuable()
    {
        return $this->container['reissuable'];
    }

    /**
     * Sets reissuable
     *
     * @param bool $reissuable whether the token should be reissuable
     *
     * @return $this
     */
    public function setReissuable($reissuable)
    {
        $this->container['reissuable'] = $reissuable;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return \NeblioAPI\Model\IssueTokenRequestFlags|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param \NeblioAPI\Model\IssueTokenRequestFlags|null $flags flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return \NeblioAPI\Model\IssueTokenRequestTransfer[]
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param \NeblioAPI\Model\IssueTokenRequestTransfer[] $transfer transfer
     *
     * @return $this
     */
    public function setTransfer($transfer)
    {
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \NeblioAPI\Model\IssueTokenRequestMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \NeblioAPI\Model\IssueTokenRequestMetadata|null $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


